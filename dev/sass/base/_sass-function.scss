
@use "sass:math";

// Functions

/// Generates a rem value from pixels with an option to not show the suffix
///
/// @param {number} $value
///   the number in pixels
/// @param {integer (unitless)} $addSuffix
///   choose whether to show the suffix rem. Defaults to true
/// @return {number} `$value` divided by `16` + the optional suffix.
@function px2rem($value, $addSuffix: true) {
  @if $addSuffix {  @return math.div($value, 16) + rem; }
  @return math.div($value, 16);
}



/// Generates an em value from pixels with an option to not show the suffix
///
/// @param {number} $value
///   the number in pixels
/// @param {integer (unitless)} $addSuffix
///   choose whether to show the suffix em. Defaults to true
/// @return {number} `$value` divided by `16` + the optional suffix.
@function px2em($value, $fontSize: 16, $addSuffix: true) {
  @if $addSuffix {  @return math.div($value, $fontSize) + em; }
  @return math.div($value, $fontSize);
}



// slightly modified BUT thanks to...
// https://allendai1.medium.com/css-clamp-and-writing-a-custom-function-using-sass-246582586a8d
/**
 * for generating clamp between min and max rems
 * @param {$minFontSiz} number of smallest size in px without px at the end
 * @param {$maxFontSize} number of largest size in px without px at the end
 * @param {$minViewWidth} number of minimum view width in rem without rem, defaults to mobile width in pixels
 * @param {$minViewWidth} number of maximum view width in rem without rem, defaults to desktopHd width in pixels
 * @returns func - After wait time
 *
 * #### example usage
 * sass_clamp(1, 4)
 * sass_clamp(1, 4, 500, 1000)
 */
@function sass_clamp ($minFontSize, $maxFontSize, $minViewWidth: $mobilePx, $maxViewWidth: $desktopHdPx) {
  // Convert all pixel values to rem without rem suffix
  $minFontSize: px2rem($minFontSize, false);
  $maxFontSize: px2rem($maxFontSize, false);
  $minViewWidth: px2rem($minViewWidth, false);
  $maxViewWidth: px2rem($maxViewWidth, false);
  // generate CSS Calc using values
  $slope: calc( (#{$maxFontSize} - #{$minFontSize}) / (#{$maxViewWidth} - #{$minViewWidth}) );
  $yaxis: calc( (#{$minFontSize} + (#{$minViewWidth}) * #{$slope} * -1) );

  @return clamp(#{$minFontSize}rem, calc( (#{$yaxis} * 1rem) + (#{$slope} * 100) * 1vw), #{$maxFontSize}rem );
}



// String replacement thanks to
// https://css-tricks.com/snippets/sass/str-replace-function/
@function str-replace($string, $search, $replace: '') {
  $index: str-index($string, $search);

  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }

  @return $string;
}